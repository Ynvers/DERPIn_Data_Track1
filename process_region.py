"""
Utilitaire pour traiter des zones sp√©cifiques d'une image satellite.

Ce script permet de s√©lectionner et traiter des coordonn√©es sp√©cifiques
d'une image GeoTIFF pour la d√©tection de champs agricoles.
"""

import argparse
import sys
import os
from pathlib import Path

# Importer les modules locaux
try:
    from field_detection import FieldDelineator, download_model
except ImportError:
    print("‚ùå Erreur: Modules requis non trouv√©s.")
    print("üìù Assurez-vous d'avoir install√© les d√©pendances:")
    print("   pip install -r requirements_dashboard.txt")
    sys.exit(1)


def parse_args():
    """Parse les arguments de la ligne de commande"""
    parser = argparse.ArgumentParser(
        description="Outil de d√©tection de champs dans une image satellite."
    )
    parser.add_argument(
        "tif_path",
        help="Chemin vers l'image satellite GeoTIFF"
    )
    parser.add_argument(
        "--region", "-r",
        nargs=4, type=int, metavar=('X', 'Y', 'WIDTH', 'HEIGHT'),
        help="R√©gion √† traiter (x y width height). Si non sp√©cifi√©, traite l'image enti√®re."
    )
    parser.add_argument(
        "--output", "-o",
        default="output",
        help="Pr√©fixe pour les fichiers de sortie"
    )
    parser.add_argument(
        "--tile-size", "-t",
        type=int, default=1024,
        help="Taille des tuiles pour le traitement par morceaux"
    )
    parser.add_argument(
        "--overlap", "-v",
        type=int, default=128,
        help="Chevauchement entre les tuiles"
    )
    parser.add_argument(
        "--confidence", "-c",
        type=float, default=0.35,
        help="Seuil de confiance pour la d√©tection (0.0-1.0)"
    )
    parser.add_argument(
        "--iou", "-i",
        type=float, default=0.5,
        help="Seuil IoU pour la suppression des non-maximums (0.0-1.0)"
    )
    parser.add_argument(
        "--model", "-m",
        help="Chemin vers le mod√®le DelineateAnything.pt"
    )
    
    return parser.parse_args()


def main():
    """Fonction principale"""
    args = parse_args()
    
    # V√©rifier que l'image existe
    if not Path(args.tif_path).exists():
        print(f"‚ùå Erreur: Le fichier {args.tif_path} n'existe pas.")
        return 1
    
    # T√©l√©charger ou utiliser le mod√®le sp√©cifi√©
    model_path = args.model if args.model else download_model()
    if not model_path:
        print("‚ùå Erreur: Impossible d'acc√©der au mod√®le.")
        return 1
    
    # Initialiser le d√©tecteur
    detector = FieldDelineator(model_path)
    
    # D√©finir la r√©gion
    region = args.region if args.region else None
    
    # Afficher les informations de traitement
    print(f"üõ∞Ô∏è Image: {args.tif_path}")
    if region:
        print(f"üîç R√©gion: ({region[0]}, {region[1]}, {region[2]}, {region[3]})")
    else:
        print("üîç R√©gion: Image enti√®re")
    print(f"‚öôÔ∏è Taille de tuile: {args.tile_size}, Chevauchement: {args.overlap}")
    print(f"üìä Seuil de confiance: {args.confidence}, Seuil IoU: {args.iou}")
    print(f"üíæ Sortie: {args.output}_overlay.png, {args.output}_fields.geojson")
    
    # Lancer le traitement
    print("\nüöÄ Lancement de la d√©tection...")
    results = detector.process_region(
        args.tif_path,
        region=region,
        output_prefix=args.output,
        tile_size=args.tile_size,
        overlap=args.overlap,
        conf_thr=args.confidence,
        iou_thr=args.iou
    )
    
    if results:
        print(f"\n‚úÖ Traitement termin√© avec succ√®s!")
        print(f"   R√©sultats sauvegard√©s:")
        print(f"   - Image avec d√©limitations: {results['overlay']}")
        print(f"   - Fichier GeoJSON: {results['geojson']}")
        return 0
    else:
        print("‚ùå Erreur lors du traitement.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
