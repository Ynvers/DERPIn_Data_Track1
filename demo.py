"""
Script de d√©monstration pour le traitement d'une image satellite et la d√©tection de champs.
Ce script illustre l'utilisation des modules image_utils.py et field_detection.py
pour traiter une image satellite et d√©tecter les d√©limitations de champs.
"""

import os
from pathlib import Path
import matplotlib.pyplot as plt
from image_utils import load_and_display_tci, download_tci_image
from field_detection import FieldDelineator, download_model


def main():
    """Fonction principale de d√©monstration"""
    
    print("üöÄ D√©monstration de d√©tection de champs sur image satellite")
    
    # 1. T√©l√©charger une image TCI exemple si n√©cessaire
    tci_url = "https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/54/T/WN/2023/8/S2A_54TWN_20230815_0_L2A/TCI.tif"
    tci_path = "TCI_demo.tif"
    
    try:
        tci_path = download_tci_image(tci_url, tci_path)
        
        # 2. Afficher l'image
        print("\nüìä Affichage de l'image satellite...")
        rgb_array, crs, transform = load_and_display_tci(tci_path)
        
        # 3. T√©l√©charger le mod√®le DelineateAnything
        print("\nüß† Pr√©paration du mod√®le...")
        model_path = download_model()
        
        if model_path is None:
            print("‚ùå Erreur: Impossible de t√©l√©charger le mod√®le.")
            return
        
        # 4. Initialiser le d√©tecteur de champs
        detector = FieldDelineator(model_path)
        
        # 5. S√©lection d'une r√©gion (par d√©faut : 2048√ó2048 pixels au centre de l'image)
        h, w = rgb_array.shape[:2]
        region = (w//2 - 1024, h//2 - 1024, 2048, 2048)  # (x, y, width, height)
        print(f"\nüîç R√©gion s√©lectionn√©e: {region}")
        
        # 6. Traiter la r√©gion et d√©tecter les champs
        print("\nüîç Lancement de la d√©tection de champs...")
        results = detector.process_region(
            tci_path, 
            region=region,
            output_prefix="demo_output",
            tile_size=1024,
            overlap=128
        )
        
        # 7. Afficher le r√©sultat
        if results:
            from PIL import Image
            print("\nüñºÔ∏è Affichage du r√©sultat...")
            overlay = Image.open(results["overlay"])
            
            plt.figure(figsize=(12, 8))
            plt.imshow(overlay)
            plt.title("D√©limitation des champs")
            plt.axis('off')
            plt.show()
            
            print(f"\n‚úÖ Traitement termin√©. Fichiers g√©n√©r√©s:")
            print(f"   - {results['overlay']} : Image avec d√©limitations")
            print(f"   - {results['geojson']} : D√©limitations au format GeoJSON")
        else:
            print("‚ùå Erreur lors du traitement.")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


if __name__ == "__main__":
    main()
